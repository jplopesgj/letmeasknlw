{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santi\\\\www\\\\letmeasknlw\\\\src\\\\contexts\\\\AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/santi/www/letmeasknlw/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,qBAA/B;;AAiBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAGP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAAyD;AAAA;;AAC5D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAI;AAChD,UAAIA,IAAJ,EAAU;AACN,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCN,IAAvC;;AAEA,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC3B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAEDN,QAAAA,OAAO,CAAC;AACJO,UAAAA,EAAE,EAAEF,GADA;AAEJG,UAAAA,IAAI,EAAEL,WAFF;AAGJM,UAAAA,MAAM,EAAEL;AAHJ,SAAD,CAAP;AAMH;AACJ,KAfmB,CAApB;AAgBA,WAAO,MAAM;AACTH,MAAAA,WAAW;AACd,KAFD;AAGH,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,iBAAeS,gBAAf,GAAkC;AAC9B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB;;AAGA,QAAIE,MAAM,CAACd,IAAX,EAAiB;AACb,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACd,IAA9C;;AAEA,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC3B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAEDN,MAAAA,OAAO,CAAC;AACJO,QAAAA,EAAE,EAAEF,GADA;AAEJG,QAAAA,IAAI,EAAEL,WAFF;AAGJM,QAAAA,MAAM,EAAEL;AAHJ,OAAD,CAAP;AAKH;AACJ;;AACD,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GApDelB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\r\nimport { auth, firebase } from './services/firebase';\r\n\r\n\r\ntype User = {\r\n    id: string;\r\n    name: string;\r\n    avatar: string;\r\n}\r\n\r\ntype AuthContextType = {\r\n    user: User | undefined;\r\n    signInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype AuthContextProvider = {\r\n    children: ReactNode;\r\n}\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\n\r\nexport function AuthContextProvider(props: AuthContextProvider) {\r\n    const [user, setUser] = useState<User>();\r\n\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                const { displayName, photoURL, uid } = user\r\n\r\n                if (!displayName || !photoURL) {\r\n                    throw new Error('Missing information from Google Account.');\r\n                }\r\n\r\n                setUser({\r\n                    id: uid,\r\n                    name: displayName,\r\n                    avatar: photoURL\r\n                })\r\n\r\n            }\r\n        })\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [])\r\n\r\n    async function signInWithGoogle() {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        const result = await auth.signInWithPopup(provider)\r\n\r\n\r\n        if (result.user) {\r\n            const { displayName, photoURL, uid } = result.user\r\n\r\n            if (!displayName || !photoURL) {\r\n                throw new Error('Missing information from Google Account.');\r\n            }\r\n\r\n            setUser({\r\n                id: uid,\r\n                name: displayName,\r\n                avatar: photoURL\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}